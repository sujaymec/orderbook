{"version":3,"sources":["OrderBook.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["OrderBook","props","console","log","orderBook","data","green_total","red_total","buy_book_list","buy_book","map","value","index","size","key","price","className","sell_book_list","sell_book","style","boxShadow","id","onClick","changeMode","mode","width","last_trade","fontWeight","spot_price","mark_price","Home","state","orderBookLoaded","bind","this","setState","setInterval","axios","get","then","response","order_book","getData","Fragment","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fc7faaf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function OrderBook(props){\r\n    console.log(props.orderBook.data)\r\n    let green_total = 0;\r\n    let red_total = 0;\r\n    \r\n    let buy_book_list = props.orderBook.data.buy_book.map((value, index) => {\r\n        if(green_total === 0){\r\n            green_total = value.size\r\n        }else{\r\n            green_total = green_total + value.size\r\n        }\r\n        return (\r\n            <li key={value.price}>\r\n                <span className=\"order-data-cell text-left\">{value.price}</span>\r\n                <span className=\"order-data-cell alt-color text-center\">{value.size}</span>\r\n                <span className=\"order-data-cell alt-color text-right\">{green_total} <span className=\"progress-bar\" ></span> </span>\r\n            </li>\r\n        )}\r\n    )\r\n    let sell_book_list = props.orderBook.data.sell_book.map((value, index) => {\r\n        if(red_total === 0){\r\n            red_total = value.size\r\n        }else{\r\n            red_total = red_total + value.size\r\n        }        \r\n        return (\r\n            <li key={value.price}>\r\n                <span className=\"order-data-cell text-left\">{value.price}</span>\r\n                <span className=\"order-data-cell alt-color text-center\">{value.size}</span>\r\n                <span className=\"order-data-cell alt-color text-right\">{red_total} <span className=\"progress-bar\" ></span> </span>\r\n            </li>\r\n        )}\r\n    )\r\n    return(\r\n        <div style={{boxShadow:'0px 3px 3px 0px #e8e8e8'}}>\r\n            <h1>Order Book</h1>\r\n            <div id=\"controls\">\r\n                <div id=\"red-list\" onClick={() => {props.changeMode('red')}}></div>\r\n                <div id=\"full-list\" onClick={() => {props.changeMode('full')}}></div>\r\n                <div id=\"green-list\" onClick={() => {props.changeMode('green')}}></div>\r\n            </div>\r\n            <div id=\"order-lists\">\r\n                {(props.mode === 'red') ? <ul id=\"sell-book\" className=\"book-list\">{sell_book_list}</ul> : (props.mode === 'full') ? <ul id=\"sell-book\" className=\"book-list\">{sell_book_list}</ul> : ''}\r\n                \r\n                <div id=\"last-traded\" >\r\n                    <span style={{width:'60%'}} >&#36;{props.orderBook.data.last_trade.price}</span>\r\n                    <span style={{width:'20%', fontWeight:'normal'}} className=\"text-right\">Index Price : {props.orderBook.data.spot_price}</span>\r\n                    <span style={{width:'20%', fontWeight:'normal'}} className=\"text-right\">Mark Price :  {props.orderBook.data.mark_price}</span>\r\n                </div>\r\n                {(props.mode === 'green') ? <ul id=\"buy-book\" className=\"book-list\">{buy_book_list}</ul> : (props.mode === 'full') ? <ul id=\"buy-book\" className=\"book-list\">{buy_book_list}</ul> : ''}   \r\n            </div> \r\n\r\n        </div>\r\n    )\r\n}","import React,{Component} from 'react'\r\nimport OrderBook from './OrderBook'\r\nimport axios from 'axios'\r\n\r\nexport default class Home extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            orderBookLoaded: false,\r\n            mode: 'full'\r\n        }\r\n        this.changeMode = this.changeMode.bind(this)\r\n    }\r\n\r\n    changeMode(mode){\r\n        console.log(mode)\r\n        this.setState({\r\n            mode: mode\r\n        })\r\n    }\r\n\r\n    getData(){\r\n        setInterval(() => {\r\n            axios.get(\"https://api.delta.exchange/orderbook/27/l2\")\r\n            .then(response => {\r\n                this.setState({\r\n                    order_book: response,\r\n                    orderBookLoaded: true\r\n                })\r\n            })\r\n        }, 1000)\r\n\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n\r\n    render(){\r\n        if(!this.state.orderBookLoaded){\r\n            return (<div>data not here yet</div>)\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n                <OrderBook orderBook={this.state.order_book} changeMode={this.changeMode} mode={this.state.mode} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Home from './Home'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}